application {
  config {
    applicationType monolith
    authenticationType jwt
    baseName bookstore
    blueprints []
    buildTool maven
    cacheProvider no
    clientFramework react
    clientPackageManager npm
    clientTheme materia
    clientThemeVariant primary
    creationTimestamp 1669723048124
    databaseType mongodb
    devDatabaseType mongodb
    dtoSuffix DTO
    enableGradleEnterprise false
    enableHibernateCache false
    enableSwaggerCodegen false
    enableTranslation false
    gradleEnterpriseHost ""
    jhiPrefix jhi
    jhipsterVersion "7.8.1"
    jwtSecretKey "MGE3MGNiZGQxYzYyZGM3YmI0ZjM5NjZhMDcxYjNjNmU2Y2VmYjMyNzcxNDRlMGRkMjUxZTI2MjNlOGVjZGE4YzBlNjY4ZDJlNzcwNDgwZjBkYTU0NDUzZWM1ZGY3ZGVjZjZlMjg0MDU3MmQxYzJkYWIyZTE1ODJlYTdjZTk5ZmI="
    languages [en, fr]
    messageBroker false
    nativeLanguage en
    otherModules []
    packageName com.haui.bookstore
    prodDatabaseType mongodb
    reactive false
    searchEngine false
    serverPort 8080
    serviceDiscoveryType no
    skipUserManagement false
    testFrameworks []
    websocket false
    withAdminUi true
  }

  entities Customer, Invoice, OrderItem, Product, ProductCategory, ProductOrder, Shipment
}

entity Customer {
  firstName String required
  lastName String required
  gender Gender required
  email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
  phone String required
  addressLine1 String required
  addressLine2 String
  city String required
  country String required
}
entity Invoice {
  date Instant required
  details String
  status InvoiceStatus required
  paymentMethod PaymentMethod required
  paymentDate Instant required
  paymentAmount BigDecimal required
}
entity OrderItem {
  quantity Integer required min(0)
  totalPrice BigDecimal required min(0)
  status OrderItemStatus required
}
/**
 * Product sold by the Online store
 */
entity Product {
  name String required
  description String
  price BigDecimal required min(0)
  size Size required
  image ImageBlob
}
entity ProductCategory {
  name String required
  description String
}
entity ProductOrder {
  placedDate Instant required
  status OrderStatus required
  code String required
}
entity Shipment {
  trackingCode String
  date Instant required
  details String
}
enum Gender {
  MALE,
  FEMALE,
  OTHER
}
enum InvoiceStatus {
  PAID,
  ISSUED,
  CANCELLED
}
enum PaymentMethod {
  CREDIT_CARD,
  CASH_ON_DELIVERY,
  PAYPAL
}
enum OrderItemStatus {
  AVAILABLE,
  OUT_OF_STOCK,
  BACK_ORDER
}
enum Size {
  S,
  M,
  L,
  XL,
  XXL
}
enum OrderStatus {
  COMPLETED,
  PENDING,
  CANCELLED
}

relationship OneToOne {
  Customer{user(login) required} to User
}
relationship OneToMany {
  ProductOrder{invoice} to Invoice{order(code) required}
  ProductOrder{orderItem} to OrderItem{order(code) required}
  ProductCategory{product} to Product{productCategory(name)}
  Customer{order} to ProductOrder{customer(email) required}
  Invoice{shipment} to Shipment{invoice(code) required}
}
relationship ManyToOne {
  OrderItem{product(name) required} to Product
}

paginate Customer, Invoice, OrderItem, Product, ProductOrder, Shipment with pagination
service Customer, Invoice, OrderItem, Product, ProductCategory, ProductOrder, Shipment with serviceClass
